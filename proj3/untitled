import java.util.LinkedList;
import java.util.TreeSet;

/**
 * Implements autocomplete on prefixes for a given dictionary of terms and weights.
 * @author Cesar
 */
public class Autocomplete {
    TST st;
    /**
     * Initializes required data structures from parallel arrays.
     * @param terms Array of terms.
     * @param weights Array of weights.
     */
    public Autocomplete(String[] terms, double[] weights) {
        TreeSet<String> duplicateChecker = new TreeSet<String>();

        st = new TST();
        if (terms.length != weights.length) {
            throw new IllegalArgumentException("Terms and weights length differred!");
        }

        for (int i = 0; i < terms.length && i < weights.length; i++) {
            if (duplicateChecker.contains(terms[i])) {
                throw new IllegalArgumentException("There are duplicate items in the file!");
            }
            checkWeight(weights[i]);
            st.put(terms[i], weights[i]);
        }
        // System.out.println(st.size());
        topMatch("s");
    }



    /**
     * Find the weight of a given term. If it is not in the dictionary, return 0.0
     * @param term yay
     * @return a double yay
     */
    public double weightOf(String term) {
        return st.get(term);
    }

    /**
     * Return the top match for given prefix, or null if there is no matching term.
     * @param prefix Input prefix to match against.
     * @return Best (highest weight) matching string in the dictionary.
     */
    public String topMatch(String prefix) {
        TST.TSTNode rootPointer = st.getRoot();
        if (prefix.length() == 0) {
            return null;
        }

        if (rootPointer.myWeight == rootPointer.maxWeight) {
            return rootPointer.fullWord;
        }
        System.out.println("ummmm");
        System.out.println(rootPointer.c);

        char[] prefixArray = prefix.toCharArray();
        while (rootPointer.myWeight != rootPointer.maxWeight) {
            for (int i = 0; i <= prefix.length(); i++) {
                char currentChar = prefixArray[i];
                // System.out.println(rootPointer.);
                if (rootPointer.middle.c == currentChar) {
                    rootPointer = rootPointer.middle;
                }
                else if (currentChar > rootPointer.middle.c) {
                    if (rootPointer.right.c == currentChar) {
                        rootPointer = rootPointer.right;
                    }
                }
                else if (currentChar < rootPointer.middle.c) {
                    if (rootPointer.left.c == currentChar) {
                        rootPointer = rootPointer.left;
                    }
                }
                else {
                    return null;
                }
            }
        }
            System.out.println(rootPointer.fullWord);

        return null;
    }

    /**
     * Returns the top k matching terms (in descending order of weight) as an iterable.
     * If there are less than k matches, return all the matching terms.
     * @param prefix which is a prefix 
     * @param k which is an integer
     * @return an iterable
     */
    public Iterable<String> topMatches(String prefix, int k) {
        if (k < 0) {
            throw new IllegalArgumentException("K must be positive");
        }
        return null;
    }

    /**
     * Returns the highest weighted matches within k edit distance of the word.
     * If the word is in the dictionary, then return an empty list.
     * @param word The word to spell-check
     * @param dist Maximum edit distance to search
     * @param k    Number of results to return 
     * @return Iterable in descending weight order of the matches
     */
    public Iterable<String> spellCheck(String word, int dist, int k) {
        LinkedList<String> results = new LinkedList<String>();  
        /* YOUR CODE HERE; LEAVE BLANK IF NOT PURSUING BONUS */
        return results;
    }

    public static void checkWeight(double y) {
        if (y < 0) {
            throw new IllegalArgumentException("A weight can't be negative!");
        }
    }

    /**
     * Test client. Reads the data from the file, 
     * then repeatedly reads autocomplete queries from standard 
     * input and prints out the top k matching terms.
     * @param args takes the name of an input file and an integer k as command-line arguments
     */
    public static void main(String[] args) {
        // initialize autocomplete data structure
        TreeSet<String> duplicateChecker = new TreeSet<String>();
        In in = new In(args[0]);
        int N = in.readInt();
        String[] terms = new String[N];
        double[] weights = new double[N];
        for (int i = 0; i < N; i++) {
            double doubleRead = in.readDouble(); 
            // checkWeight(doubleRead);
            weights[i] = doubleRead;  // read the next weight
            in.readChar();                  // scan past the tab
            String inLine = in.readLine();
            // if (duplicateChecker.contains(inLine)) {
            //     throw new IllegalArgumentException("There are duplicate items in the file!");
            // }
            duplicateChecker.add(inLine);
            terms[i] = inLine;      // read the next term
        }

        Autocomplete autocomplete = new Autocomplete(terms, weights);

        // process queries from standard input
        int k = Integer.parseInt(args[1]);
        while (StdIn.hasNextLine()) {
            String prefix = StdIn.readLine();
            for (String term : autocomplete.topMatches(prefix, k)) {
                StdOut.printf("%14.1f  %s\n", autocomplete.weightOf(term), term);
            }   
        }
    }
}
